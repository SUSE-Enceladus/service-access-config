#  Copyright (C) 2019 SUSE LLC
#  All rights reserved.
#
#  This file is part of serviceAccessConfig
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""serviceAccessConfig plugin for nginx"""

import ConfigParser
import logging

from accessrulegenerator import ServiceAccessGenerator
from generatorexceptions import *


class ServiceAccessGeneratorNginx(ServiceAccessGenerator):
    """Specific access rule generator for nginx"""

    # ======================================================================
    def __init__(self, ip_source_config_file_name):
        self.section_name = 'nginx'
        super(ServiceAccessGeneratorNginx, self).__init__(
            ip_source_config_file_name)

    # ======================================================================
    def _add_cidr_rules(self, content, cidr_blocks):
        """Add the cidr bloc data to the content string"""

        if content and not content.endswith('\n'):
            content += '\n'

        cidr_blocks = cidr_blocks.split(',')
        header = '# ACL generated by serviceAccessConfig do not remove this\n'
        header += '# comment entry from here to EOF will be over written\n'
        deny_rule = 'deny all;\n'
        acl = map(lambda cidr: 'allow {};'.format(cidr), cidr_blocks)
        content += header + '\n'.join(acl) + '\n' + deny_rule

        return content

    # ======================================================================
    def _update_service_config(self, cidr_blocks):
        """Update the nginx configuragtion file"""

        for cfg in self.service_config.split(','):
            new_content = ''
            lines = []
            acl_added = False
            try:
                lines = open(cfg, 'r').readlines()
            except Exception:
                new_content = self._add_cidr_rules(new_content, cidr_blocks)
                acl_added = True

            for ln in lines:
                if ln.startswith('# ACL generated by serviceAccessConfig'):
                    new_content = self._add_cidr_rules(
                        new_content, cidr_blocks
                    )
                    acl_added = True
                    break
                else:
                    new_content += ln

            if not acl_added:
                new_content = self._add_cidr_rules(new_content, cidr_blocks)

            with open(cfg, 'w') as nginx_cfg:
                nginx_cfg.write(new_content)
            logging.info('Updated nginx config file %s' % cfg)
